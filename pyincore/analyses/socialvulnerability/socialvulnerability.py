# Copyright (c) 2021 University of Illinois and others. All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Mozilla Public License v2.0 which accompanies this distribution,
# and is available at https://www.mozilla.org/en-US/MPL/2.0/

import numpy as np
import pandas as pd
import censusdata
import sys

from pyincore import BaseAnalysis
from pyincore.analyses.socialvulnerability.socialvulnerabilityutil import SocialVulnerabilityUtil

class SocialVulnerability(BaseAnalysis):
    """This analysis computes a social vulnerability score for per associated zone in census data.

    The output of the computation is a dataset CSV format.

    Contributors
        | Science: Elaina Sutley, Amin Enderami
        | Implementation:  Amin Enderami, Santiago Núñez-Corrales, and NCSA IN-CORE Dev Team

    Related publications
        Sutley, E.J. and Hamideh, S., 2020. Postdisaster housing stages: a Markov chain approach to model sequences
        and duration based on social vulnerability. Risk Analysis, 40(12), pp.2675-2695.

    Args:
        incore_client (IncoreClient): Service authentication.

    """

    def __init__(self, incore_client):
        super(SocialVulnerability, self).__init__(incore_client)

    def run(self):
        """Execute the social vulnerability analysis using known parameters."""
        year = str(self.get_parameter('year'))
        state = self.get_parameter('state')
        county = self.get_parameter('county')
        census_geo_level = self.get_parameter('census_geo_level')

        self.social_vulnerability_model(year, state, county, census_geo_level)

    def social_vulnerability_model(self, year, state, county, census_geo_level):
        """

        Args:
            year (str): string indicating the year of the analysis
            state (str): string indicating the state containing relevant zones
            county (str): string indicating the county containing relevant zones
            census_geo_level (str): string indicating the relevant census geographic level

        Returns:

        """
        svu = SocialVulnerabilityUtil()
        state_number = svu.get_fips_code_for_state(state)
        state_data = None

        # Use state abbreviations to find one matching (case insensitive) the target and stop
        if len(state) == 2:
            for key, state_dict in svu.STATE_FIPS_DICT.items():
                if state_dict['abbreviation'] == state.upper():
                    state_data = state_dict['name']
                    break

        county_number = self.county_list(state_data, state_number, county, year)

        if len(county_number) == 0:
            print("Invalid county name")
            sys.exit(0)

        geo_type = svu.get_geo_type(census_geo_level)

        if geo_type == None:
            print("invalid geographic level" + "\n" + 'only "Census Tract" and "Block Group" are acceptable levels' +
                  '\n' + 'Please enter "CT" or "BG" as input parameters fot the geo_type')
            sys.exit(0)

    @staticmethod
    def county_list(state_data, state_number, county, year):
        list = censusdata.geographies(censusdata.censusgeo([('state', state_number), ('county', "*")]), "acs5", year)

        county_number = ""
        for key, county_dict in list.items():
            if key == county.title() + " County, " + state_data.title():
                county_number = '%s' % (str(county_dict).split(':')[-1])
        return county_number

    def get_spec(self):
        """Get specifications of the housing serial recovery model.

        Returns:
            obj: A JSON object of specifications of the social vulnerability model.

        """
        return {
            'name': 'social-vulnerability',
            'description': 'Social vulnerability score model',
            'input_parameters': [
                {
                    'id': 'result_name',
                    'required': True,
                    'description': 'Result CSV dataset name',
                    'type': str
                },
                {
                    'id': 'year',
                    'required': True,
                    'description': 'Year for which the analysis is computed',
                    'type': int
                },
                {
                    'id': 'state',
                    'required': True,
                    'description': 'State for which the anaysis is computed',
                    'type': str
                },
                {
                    'id': 'county',
                    'required': True,
                    'description': 'Country for which the analysis is computed',
                    'type': str
                },
                {
                    'id': 'census_geo_level',
                    'required': True,
                    'description': 'Census geographic level for which the analysis is computed',
                    'type': str
                }
            ],
            'input_datasets': [
            ],
            'output_datasets': [
                {
                    'id': 'ds_result',
                    'parent_type': 'social_vulnerability_score',
                    'description': 'A csv file with zones containing demographic factors'
                                   'qualified by a social vulnerability score',
                    'type': 'incore:socialVulnerabilityScore'
                }
            ]
        }
